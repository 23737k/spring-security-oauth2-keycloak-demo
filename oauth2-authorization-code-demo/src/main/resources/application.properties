server.port=8080

# Configuración de OAuth2 para Keycloak
spring.security.oauth2.client.registration.keycloak-auth-server.client-id=demo-app-client
spring.security.oauth2.client.registration.keycloak-auth-server.client-secret=uXE7jK1B3qnozXfMdYts4ivx4jwY7Klr
spring.security.oauth2.client.registration.keycloak-auth-server.scope=openid,profile,roles
spring.security.oauth2.client.registration.keycloak-auth-server.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak-auth-server.redirect-uri=http://localhost:8080/login/oauth2/code/demo-app-client

spring.security.oauth2.client.provider.keycloak-auth-server.issuer-uri=http://localhost:8180/realms/demo-app-realm

#
# registration:
#  - permite definir una lista de clientes OAuth 2.0 que la aplicación va a utilizar para autenticación y autorización.
#    Permite definir uno o más proveedores de autenticación (como Google, Facebook, GitHub, etc.) y especificar los detalles necesarios para la comunicación
#    con estos proveedores.
#    Ej:
#        registration:
#          google:
#            client-id: your-client-id
#            client-secret: your-client-secret
#            scope: profile, email
#            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
#            client-name: Google
#          github:
#            client-id: your-client-id
#            client-secret: your-client-secret
#            scope: read:user
#            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
#            client-name: GitHub

#  authorization-grant-type:
#    - define el flujo de autorización que se utilizará para obtener el token de acceso y, potencialmente, otros tokens (como el ID token en OpenID Connect).
#
#    Principales Tipos de Authorization Grant

#    authorization_code:

#      Uso: Para aplicaciones web y aplicaciones móviles que pueden mantener en secreto un client secret.
#      Descripción: Este es el flujo más común y seguro. Implica redirigir al usuario al proveedor de OAuth 2.0 para la autenticación, y luego intercambiar un
#                   código de autorización por un token de acceso.
#      Flujo:
#        El cliente redirige al usuario al proveedor de OAuth 2.0.
#        El usuario se autentica y autoriza la aplicación.
#        El proveedor redirige al usuario de vuelta al cliente con un código de autorización.
#        El cliente intercambia el código de autorización por un token de acceso.

#     client_credentials:
#
#      Uso: Para comunicación entre servidores (server-to-server), donde no se requiere interacción del usuario.
#      Descripción: Este flujo permite a una aplicación obtener un token de acceso directamente usando sus propias credenciales (client ID y client secret).
#      Flujo:
#        El cliente envía una solicitud directamente al servidor de autorización con sus credenciales.
#        El servidor de autorización devuelve un token de acceso.

#     password:
#
#      Uso: Para aplicaciones de confianza absoluta donde el cliente maneja directamente las credenciales del usuario.
#      Descripción: Este flujo permite a la aplicación obtener un token de acceso usando el nombre de usuario y la contraseña del usuario.
#      Flujo:
#        El cliente envía una solicitud con el nombre de usuario y la contraseña del usuario.
#        El servidor de autorización devuelve un token de acceso.

#     implicit:
#
#      Uso: Para aplicaciones web y móviles, especialmente aplicaciones SPA (Single Page Applications) que no pueden mantener en secreto un client secret.
#      Descripción: Este flujo es similar al de authorization code pero omite el paso de intercambio de código de autorización, y el token de acceso se devuelve directamente en la redirección.
#      Flujo:
#        El cliente redirige al usuario al proveedor de OAuth 2.0.
#        El usuario se autentica y autoriza la aplicación.
#        El proveedor redirige al usuario de vuelta al cliente con un token de acceso.
